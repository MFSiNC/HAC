if (SERVER) then	function HAC.GetRealName(ply)		if ply and ply:IsValid() then			ply:ConCommand("ulx_playerspawn")		end				timer.Simple(2, function()			if ply and ply:IsValid() then				ply:ConCommand("ulx_playerspawn")			end		end)	end	hook.Add("PlayerInitialSpawn", "HACGetRealName", HAC.GetRealName)	function HAC.SetRealName(ply,cmd,args)		if ply and ply:IsValid() and (#args == 2) and args[2] == "Cake" then			ply.RealName = args[1] or "None"		end	end	concommand.Add("ulx_playerspawned", HAC.SetRealName)			function HAC.PlyPing(ply,cmd,args)		if not ply:IsAdmin() then return end				for k,v in pairs(player.GetAll()) do 			if v and v:IsValid() and not v:IsBot() then				v:ConCommand("gm_ping Ping")								HAC.PingLog("[HAC"..HAC.Version.."] ["..os.date("%d-%m-%y %I:%M%p").."] - Sent - "..v.AntiHaxName.." ("..v:SteamID()..") - "..v:IPAddress().."\n")				ply:PrintMessage(HUD_PRINTCONSOLE, "[HAC] - Sent - "..v.AntiHaxName.."\n")			end		end	end	concommand.Add("hac_ping", HAC.PlyPing)			function HAC.PlyPong(ply,cmd,args)		if #args >= 2 and args[2] == "HACReport" then			if (ply.RealName and ply.RealName != "None") then				HAC.PingLog("[HAC"..HAC.Version.."] ["..os.date("%d-%m-%y %I:%M%p").."] - Recieved - "..ply.AntiHaxName.." ["..ply.RealName.."] ("..ply:SteamID()..") - "..ply:IPAddress().."\n")				HAC.HACPrint2Admins("[HAC] - Recieved - "..ply.AntiHaxName.." ["..ply.RealName.."]\n")			end		end	end	concommand.Add("gm_pong", HAC.PlyPong)		function HAC.PingLog(logstr)		local WriteLog1 = logstr or "WriteLog1 Error"				if not file.Exists("hac_ping_log.txt") then			file.Write("hac_ping_log.txt", "[HAC"..HAC.Version.."] Ping log created at ["..os.date("%d-%m-%y %I:%M%p").."] \n\n")		end		filex.Append("hac_ping_log.txt", WriteLog1)	end	elseif (CLIENT) then	local function GetSteamName()		local SteamAccount = "None"		local AccTable = {}				local PathRaw = util.RelativePathToFull("gameinfo.txt")		local PathNoSlash1 = string.gsub(PathRaw, "\\", " ")		local PathNoSlash2 = string.gsub(PathNoSlash1, "/", " ")		local PathTable = string.Explode(" ", PathNoSlash2)			local DontBother = {		"c:", "d:", "e:", "f:", "g:",		"h:", "i:", "j:", "k:", "l:", 		"m:", "n:", "o:", "p:", "q:", 		"r:", "s:", "t:", "u:", "v:", 		"w:", "x:", "y:", "z:", 		"new", "folder", "drive", "file", "cuocuo",		"archivos", "users", "library", "application", "support",		"de", "sh", "hacks", "steamfolder", "crack", "steamspel",		"team", "client", "steamup", "psteam", "game", 		"v3", "v2", "v1", "downloads", "programmer",		"x86valvesteam", "programa", "programas", "program", "files", "programme",		"programok", "steamup", "steamup1", "steamup2", "steamup3", 		"x86", "(x86)", "volumes", "macintosh", "hd",		"friends", "games1", "games2", "games3",		"pcspil", "desktop", "programs",		"pacsteamt", "pacsteam", "cracked",		"valve", "steam", "steam1", "steam2", "steam3", "games",		"steamapps", "disk", "folder", "new", "gmod", "backup",		"garrysmod", "windows.old", "old", "windows",		"gameinfo.txt",		"sourcemods",		"orangebox",	}				for k,v in ipairs(PathTable) do			if not table.HasValue(DontBother, string.lower(v)) then				table.insert(AccTable, v)			end		end				if #AccTable >= 1 then			SteamAccount = table.concat(AccTable, " ")		end		return string.Trim(SteamAccount)	end	concommand.Add("ulx_playerspawn", function(ply,cmd,args)		RunConsoleCommand("ulx_playerspawned", GetSteamName(), "Cake")	end)		local function RefreshRanks(ply,cmd,args)		if (#args >= 1) and args[1] == "Ping" then			RunConsoleCommand("gm_pong", GetSteamName(), "HACReport")			return		end	end	concommand.Add("gm_ping", RefreshRanks)end